/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as OrgsIndexImport } from './routes/orgs/index'
import { Route as OrgsSlugImport } from './routes/orgs/$slug'
import { Route as OrgsSlugIndexImport } from './routes/orgs/$slug/index'
import { Route as OrgsSlugDashboardImport } from './routes/orgs/$slug/dashboard'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const OrgsIndexRoute = OrgsIndexImport.update({
  id: '/orgs/',
  path: '/orgs/',
  getParentRoute: () => rootRoute,
} as any)

const OrgsSlugRoute = OrgsSlugImport.update({
  id: '/orgs/$slug',
  path: '/orgs/$slug',
  getParentRoute: () => rootRoute,
} as any)

const OrgsSlugIndexRoute = OrgsSlugIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => OrgsSlugRoute,
} as any)

const OrgsSlugDashboardRoute = OrgsSlugDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => OrgsSlugRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/orgs/$slug': {
      id: '/orgs/$slug'
      path: '/orgs/$slug'
      fullPath: '/orgs/$slug'
      preLoaderRoute: typeof OrgsSlugImport
      parentRoute: typeof rootRoute
    }
    '/orgs/': {
      id: '/orgs/'
      path: '/orgs'
      fullPath: '/orgs'
      preLoaderRoute: typeof OrgsIndexImport
      parentRoute: typeof rootRoute
    }
    '/orgs/$slug/dashboard': {
      id: '/orgs/$slug/dashboard'
      path: '/dashboard'
      fullPath: '/orgs/$slug/dashboard'
      preLoaderRoute: typeof OrgsSlugDashboardImport
      parentRoute: typeof OrgsSlugImport
    }
    '/orgs/$slug/': {
      id: '/orgs/$slug/'
      path: '/'
      fullPath: '/orgs/$slug/'
      preLoaderRoute: typeof OrgsSlugIndexImport
      parentRoute: typeof OrgsSlugImport
    }
  }
}

// Create and export the route tree

interface OrgsSlugRouteChildren {
  OrgsSlugDashboardRoute: typeof OrgsSlugDashboardRoute
  OrgsSlugIndexRoute: typeof OrgsSlugIndexRoute
}

const OrgsSlugRouteChildren: OrgsSlugRouteChildren = {
  OrgsSlugDashboardRoute: OrgsSlugDashboardRoute,
  OrgsSlugIndexRoute: OrgsSlugIndexRoute,
}

const OrgsSlugRouteWithChildren = OrgsSlugRoute._addFileChildren(
  OrgsSlugRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/orgs/$slug': typeof OrgsSlugRouteWithChildren
  '/orgs': typeof OrgsIndexRoute
  '/orgs/$slug/dashboard': typeof OrgsSlugDashboardRoute
  '/orgs/$slug/': typeof OrgsSlugIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/orgs': typeof OrgsIndexRoute
  '/orgs/$slug/dashboard': typeof OrgsSlugDashboardRoute
  '/orgs/$slug': typeof OrgsSlugIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/orgs/$slug': typeof OrgsSlugRouteWithChildren
  '/orgs/': typeof OrgsIndexRoute
  '/orgs/$slug/dashboard': typeof OrgsSlugDashboardRoute
  '/orgs/$slug/': typeof OrgsSlugIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/orgs/$slug'
    | '/orgs'
    | '/orgs/$slug/dashboard'
    | '/orgs/$slug/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/orgs' | '/orgs/$slug/dashboard' | '/orgs/$slug'
  id:
    | '__root__'
    | '/'
    | '/orgs/$slug'
    | '/orgs/'
    | '/orgs/$slug/dashboard'
    | '/orgs/$slug/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OrgsSlugRoute: typeof OrgsSlugRouteWithChildren
  OrgsIndexRoute: typeof OrgsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OrgsSlugRoute: OrgsSlugRouteWithChildren,
  OrgsIndexRoute: OrgsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/orgs/$slug",
        "/orgs/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/orgs/$slug": {
      "filePath": "orgs/$slug.tsx",
      "children": [
        "/orgs/$slug/dashboard",
        "/orgs/$slug/"
      ]
    },
    "/orgs/": {
      "filePath": "orgs/index.tsx"
    },
    "/orgs/$slug/dashboard": {
      "filePath": "orgs/$slug/dashboard.tsx",
      "parent": "/orgs/$slug"
    },
    "/orgs/$slug/": {
      "filePath": "orgs/$slug/index.tsx",
      "parent": "/orgs/$slug"
    }
  }
}
ROUTE_MANIFEST_END */
